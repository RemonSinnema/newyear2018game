import org.apache.tools.ant.taskdefs.condition.Os


buildscript {
  ext {
    serenityVersion = '1.2.4'
  }
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "net.serenity-bdd:serenity-gradle-plugin:$serenityVersion"
  }
}

plugins {
  id 'java'
  id 'eclipse'
  id 'org.asciidoctor.convert' version '1.5.2'
}

apply plugin: 'net.serenity-bdd.aggregator'
test.finalizedBy aggregate, checkOutcomes

task deleteTarget(type: Delete ) { delete file('target') }
clean.dependsOn deleteTarget


repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion",
      "org.springframework.boot:spring-boot-starter-mobile:$springBootVersion",
      "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
      "org.springframework.boot:spring-boot-starter-hateoas:$springBootVersion",
      'org.atteo:evo-inflector:1.2.2',
      'commons-io:commons-io:2.5'
  runtime 'com.h2database:h2:1.4.195'
  testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion",
      'org.springframework.restdocs:spring-restdocs-mockmvc:1.1.2.RELEASE',
      "net.serenity-bdd:serenity-junit:$serenityVersion",
      "net.serenity-bdd:serenity-screenplay:$serenityVersion",
      "net.serenity-bdd:serenity-screenplay-webdriver:$serenityVersion"
}


sourceCompatibility = 1.8

jar {
  baseName = 'nye18'
  version = '0.1'
}

task wrapper(type: Wrapper) { gradleVersion = '3.5' }

defaultTasks 'build'


ext { 
  snippetsDir = file('build/apis-docs-fragments')
  binariesDir = file('src/install')
  phantomVersion = '2.1.1-' + (Os.isFamily(Os.FAMILY_WINDOWS) ? 'windows' :  Os.isFamily(Os.FAMILY_MAC) ? 'macosx' :
      'linux-x86_64')
  phantomInstallFile = new File(binariesDir,'phantom/phantomjs-' + phantomVersion + '.zip')
  phantomInstallDir = new File(project.buildDir, 'phantom')
  phantomBinary = new File(phantomInstallDir, 'bin/phantomjs' + (Os.isFamily(Os.FAMILY_WINDOWS) ? '.exe' : ''))
  screenshotsDir = new File(project.buildDir, 'screenshots')
}

task installPhantom(type: Copy) {
  group 'any cluster'
  from zipTree(phantomInstallFile)
  into phantomInstallDir
}

test { 
  dependsOn installPhantom
  outputs.dir snippetsDir
  systemProperty 'phantomjs.binary.path', phantomBinary.path
}

asciidoctor {
  attributes 'snippets': snippetsDir
  inputs.dir snippetsDir
  dependsOn test
}

build.dependsOn asciidoctor
